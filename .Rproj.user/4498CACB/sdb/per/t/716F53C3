{
    "contents" : "## Fairy_flycatcher Occupancy Models\n\nrequire(unmarked)\nrequire(AICcmodavg)\nrequire(car)\n\n## set working directory \n#setwd(\"~/Dropbox/PhD/Chapter2/Hornbill\")\n\n#laptop\nsetwd(\"C:/Users/AllanClark/Dropbox/PhD/Year1/ISEC2014/OccupancyModel2/Application\")\n\n#office\n#setwd(\"C:/Users/01369661/Dropbox/PhD/Year1/ISEC2014/OccupancyModel2/Application\")\n\n#################\n#Using the code provided to me by Kriston Broms\n#####################\n\n###\n### Convert the survey data to the correct format \"by hand\"  ---------------------------------------\n###\n\nalldat <- read.csv(\"Fairy_flycatcher.csv\", header=T)[, -1]\n#alldat <- read.table(\"Fairy_flycatcher2.txt\", header=T)[, -1]\nhead(alldat)\nnames(alldat)\n\nalldat$yearF <- paste( strptime(as.character(alldat$Start_Date),format=\"%Y/%m/%d\")$year - 100, \"F\", sep=\"\")\nhead(alldat$yearF, 20)\n\n#make some new variables\nalldat[, 34]<- (alldat[,8]-mean(alldat[,8]))/sd(alldat[,8]) #standardized total number of species\ncolnames(alldat)[34]<-\"nspp\"\n\n#the huntley variables standardized\nalldat[, 35]<- (alldat[,14]-mean(alldat[,14]))/sd(alldat[,14]) #standardized GDD0\nalldat[, 36]<- (alldat[,15]-mean(alldat[,15]))/sd(alldat[,15]) #standardized GDD5\nalldat[, 37]<- (alldat[,16]-mean(alldat[,16]))/sd(alldat[,16]) #standardized MTCO\nalldat[, 38]<- (alldat[,17]-mean(alldat[,17]))/sd(alldat[,17]) #standardized MTWA\nalldat[, 39]<- (alldat[,18]-mean(alldat[,18]))/sd(alldat[,18]) #standardized AET_div_PET\nalldat[, 40]<- (alldat[,19]-mean(alldat[,19]))/sd(alldat[,19]) #standardized Wet_Intensity\nalldat[, 41]<- (alldat[,20]-mean(alldat[,20]))/sd(alldat[,20]) #standardized Dry_Intensity\nalldat[,42]<-alldat[,17]-alldat[,16] #maximum mean temp - min mean temp\nalldat[,42]<- (alldat[,42]-mean(alldat[,42]))/sd(alldat[,42]) #standardized mean range\ncolnames(alldat)[35:42]<-c(\"GDD0_s\",\"GDD5_s\",\"MTCO_s\",\t\"MTWA_s\",\t\"AET_div_PET_s\",\t\"Wet_Intensity_s\",\"Dry_Intensity_s\",\"Range_mean\")\n\n#we select all regions\n#alldat$region <- ifelse(alldat$y_coord > -26.5, \"N\", \"S\")\n\n## Convert the *survey specific* covariates into long form\nnames(alldat)  #make sure columns number (below) match up with correct columns\n\n# convert the long data frame into the wide format required by unmarked\nout.y <- unstack(alldat[ , c(11, 2)]) #Spp_On_Card\n\n#detection covariates\n  out.intensive <- unstack(alldat[ , c(28, 2)]) #log number of intensive hours birding\n  out.year <- unstack(alldat[ , c(30, 2)]) #year.F (baseline : 2008=0)\n  out.logtotal <- unstack(alldat[ , c(31, 2)] ) #log total number of hours birding\n  out.day.std <- unstack(alldat[ , c(32, 2)])\n  out.yearF <- unstack(alldat[ , c(33, 2)])\n  out.nspp <- unstack(alldat[ , c(34, 2)])\n\n#occupancy covariates\n  #The huntley variables standardized\n  out.GDD0<-unstack(alldat[ , c(35, 2)])\n  out.GDD5<-unstack(alldat[ , c(36, 2)])\n  out.MTCO<-unstack(alldat[ , c(37, 2)])\n  out.MTWA<-unstack(alldat[ , c(38, 2)])\n  out.AET_div_PET<-unstack(alldat[ , c(39, 2)])\n  out.Wet_Intensity<-unstack(alldat[ , c(40, 2)])\n  out.Dry_Intensity<-unstack(alldat[ , c(41, 2)])\n  out.Range<-unstack(alldat[ , c(42, 2)])\n\n  #Biome covariates\n  out.SV<-unstack(alldat[ , c(21, 2)])\n  out.G<-unstack(alldat[ , c(22, 2)])\n  out.AZ<-unstack(alldat[ , c(23, 2)])\n  out.NK<-unstack(alldat[ , c(24, 2)])\n  \n#No limit has been made of the number of surveys - this can be changed later!\nlen.y<-NULL\nmax.y<-NULL\nfor (i in 1:length( out.y))\n{  \n  len.y[i]<- length(out.y[[i]]) \n  max.y[i]<- max(out.y[[i]]) \n}\nmaxSurveys<-max(len.y)\n\n#now convert these lists into the ragged arrrays\n  DummyMatInit<-matrix(NA, nrow= length(unique(alldat$Pentad )), ncol = maxSurveys)\n  y <- DummyMatInit ## absence presence data\n  \n  #detection covariates\n  intensive <- DummyMatInit \n  year <- DummyMatInit\n  log.total <- DummyMatInit \n  day.Std <- DummyMatInit \n  yearF <- DummyMatInit \n  nspp <- DummyMatInit \n\n  #occupancy covariates\n  #The huntley variables standardized\n  gdd0 <- DummyMatInit \n  gdd5 <- DummyMatInit \n  mtco <- DummyMatInit \n  mtwa <- DummyMatInit \n  aet_div_pet <- DummyMatInit \n  wet <- DummyMatInit \n  dry <- DummyMatInit \n  range.mean<- DummyMatInit \n\n  #Biome covariates\n  sv<-DummyMatInit\n  g<-DummyMatInit\n  az<-DummyMatInit\n  nk<-DummyMatInit\n\nj <- 1\nfor(i in 1:length(out.y) )\n{\n  if( is.null( out.y[[i]] ) == FALSE)\n  {\n    Len.y.i<-length( out.y[[i]])\n    \n    y[j, 1:Len.y.i] <- out.y[[i]]\n    \n    intensive[j, 1:Len.y.i] <- out.intensive[[i]]\n    year[j, 1:Len.y.i] <- out.year[[i]]\n    log.total[j, 1:Len.y.i] <- out.logtotal[[i]]\n    day.Std[j, 1:Len.y.i] <- out.day.std[[i]]\n    yearF[j, 1:Len.y.i] <- out.yearF[[i]]\n    nspp[j, 1:Len.y.i] <- out.nspp[[i]] \n    \n    #huntley variables\n    gdd0[j, 1:Len.y.i] <- out.GDD0[[i]]\n    gdd5[j, 1:Len.y.i] <- out.GDD5[[i]]\n    mtco[j, 1:Len.y.i] <- out.MTCO[[i]]\n    mtwa[j, 1:Len.y.i] <- out.MTWA[[i]]\n    aet_div_pet[j, 1:Len.y.i] <- out.AET_div_PET[[i]]\n    wet[j, 1:Len.y.i] <- out.Wet_Intensity[[i]]\n    dry[j, 1:Len.y.i] <- out.Dry_Intensity[[i]]\n    \n    #biomes\n    sv[j, 1:Len.y.i] <- out.SV[[i]]\n    g[j, 1:Len.y.i] <- out.G[[i]]\n    az[j, 1:Len.y.i] <- out.AZ[[i]]\n    nk[j, 1:Len.y.i] <- out.NK[[i]]\n    \n    range.mean[j, 1:Len.y.i] <- out.Range[[i]]\n    \n    j <- j + 1\n  }\t\n}\n\n# and now put the matrices into the correct format\n#detection covariates\n#year should be categorical!\nobs.covs <- list(intensive=intensive[,], \n                 year=year[,], \n                 log.total=log.total[,],\n                 day.Std=day.Std[,],\n                 yearF=yearF[,],  \n                 nspp=nspp[,])\n\n#############\t\t\n###\n### Clean up  the site specific variables -------------------------------------------\n###\n\n#first isolate the site covariates that will be considered.\nnames(alldat)\n#occupancy covariates\n#Biome covariates, The huntley variables standardized\nsite.dat <- alldat[ , c(2, 21:24,35:42)]  #change later\nhead(site.dat)\nsite.dat <- unique(site.dat)\t\t\nhead(site.dat)\n\ndim(site.dat)\ndim(y)\n\n\nOMdat <- unmarkedFrameOccu(y=y[,], siteCovs = site.dat, obsCovs=obs.covs)\n\nrequire(vboccupancy)\nymat<-y\nXmat<-alldat[ , c(2, 21:24,35:42)]  #change later (include all of the X's Pentad is not a regressor!)\n\nWmat <- list(intensive=intensive[,], \n                 year=year[,], \n                 log.total=log.total[,],\n                 day.Std=day.Std[,],\n                 yearF=yearF[,],  \n                 nspp=nspp[,])\n\ndesign_mats<-vb_Designs(W=Wmat, X=Xmat, y=ymat)\nnames(design_mats)\n\ndesign_mats$Y\ndim(design_mats$Y)\n\ndim(design_mats$X)\ndim(design_mats$W)\n\nnames(design_mats)\ndesign_mats$Names\ndesign_mats$nvisits\n\ndesign_mats$pres_abs\n\nalpha_0 <- matrix(0, ncol=1, nrow=3) \nbeta_0 <- matrix(0, ncol=1, nrow=3)\nSigma_beta_0 <- diag(3)*1000\nSigma_alpha_0 <- diag(3)*1000\n\nform1<- ymat~AET_div_PET_s + Range_mean ~nspp + day.Std\nvb_a1<-vb_model2_la(formula=form1, design_mats=design_mats, alpha_0=alpha_0, beta_0=beta_0, Sigma_alpha_0=Sigma_alpha_0, Sigma_beta_0=Sigma_beta_0,LargeSample=TRUE, epsilon=1e-5)\n\n\n#  occu( ~nspp + day.Std \n#        ~AET_div_PET_s + Range_mean, \n#        data=OMdat,\n#        engine=\"C\")\n\n#Some fits\n#year?\n#year must be included!\n#extract the rows of y with a 1 in it! = knownOcc\n\npairs(site.dat[,6:13])\n#GDD0_s+GDD5_s are collinear\n\npairs(site.dat[,8:13])\n#MTCO_s+MTWA_s highly correlated\n\npairs(site.dat[,10:13])\n\n\n# f1.<- occu( ~intensive + log.total  + nspp \n#            ~SV + GDD5_s + Dry_Intensity_s+\n#              AET_div_PET_s+ Range_mean, data=OMdat,\n#            engine=\"C\")\n# f1.\n# \n# f2.<- occu( ~ nspp \n#             ~SV + AET_div_PET_s, data=OMdat,\n#             engine=\"C\")\n# f2.\n# \n# f3.<- occu( ~ nspp \n#             ~SV + Range_mean, data=OMdat,\n#             engine=\"C\")\n# f3.\n# \n# f1<- occu( ~intensive + log.total  + nspp \n#            ~SV + \n#             AET_div_PET_s+ Range_mean, data=OMdat,\n#            engine=\"C\")\n# f1\n# \n# f2<- occu( ~intensive + log.total  + nspp \n#            ~SV + \n#              AET_div_PET_s, data=OMdat,\n#            engine=\"C\")\n# f2\n# \n# f3<- occu( ~ log.total  + nspp \n#            ~SV + \n#              AET_div_PET_s, data=OMdat,\n#            engine=\"C\")\n# f3\n# \n# f4<- occu( ~  nspp \n#            ~SV + \n#              AET_div_PET_s, data=OMdat,\n#            engine=\"C\")\n# f4\n# \n# f5<- occu( ~  nspp \n#            ~SV + \n#              Range_mean, data=OMdat,\n#            engine=\"C\")\n# f5\n# \n# f6<- occu( ~nspp + day.Std \n#            ~SV, \n#            data=OMdat,\n#            engine=\"C\")\n# f6\n\nf7<- occu( ~nspp + day.Std \n           ~AET_div_PET_s + Range_mean, \n           data=OMdat,\n           engine=\"C\")\nf7\n\n# fits <- fitList(m1=f1, m2=f2, m3=f3, m4=f4, m5=f5 , m6=f6, m7=f7)\n# modSel(fits)\n\n#=====================================================\n#Use model 7\n#Do goodness of fit on this model\n#Errors are produced!\ngof.f7<-mb.gof.test(f7, nsim = 100)\n\nmb.chisq(f7)\n\n#=====================================================\nset.seed(1234)\nchisq. <- function(fm) \n{\n  observed<-getY(fm@data)\n  expected<-fitted(fm)\n  sum((observed - expected)^2/expected, na.rm=TRUE)\n}\n\nt1<-Sys.time()\npb <- parboot(f7, statistic = chisq., nsim = 5, report=1)\nt2<-Sys.time()\nt2-t1\n\nplot(pb, main = \"\")\n#=====================================================\n\nrequire(doParallel)\n\n# register a cluster:\ndetectCores()\ncl <- makeCluster(2)\nregisterDoParallel(cl)\n\nt1<-Sys.time()\n# run a parallel job:\nx <- foreach(i = 1:5) %dopar% \n{\n  require(unmarked)\n  set.seed(i)\n  chisq. <- function(fm) \n  {\n    observed<-getY(fm@data)\n    expected<-fitted(fm)\n    sum((observed - expected)^2/expected, na.rm=TRUE)\n  }\n  \n  pb_cl<-parboot(f7, statistic = chisq., nsim = 1, report=1) \n  pb_cl@t.star[1]\n}\nt2<-Sys.time()\nt2-t1\n\nx\n# each iteration is run on a separate core\n\nstopCluster(cl)\n\n\n\n#=====================================================\n#run as a cluster\nrequire(foreach)\n\nt1<-Sys.time()\nchisq. <- function(fm) \n{\n  observed<-getY(fm@data)\n  expected<-fitted(fm)\n  sum((observed - expected)^2/expected, na.rm=TRUE)\n}\n\nx <- foreach(i = 1:5, .combine=\"c\") %do% \n{\n  set.seed(i)  \n  pb_cl<-parboot(f7, statistic = chisq., nsim = 1) \n  pb_cl@t.star[1]\n}\nt2<-Sys.time()\nt2-t1\n\nx\n#=====================================================\n\n\n#Bayesian model using R2Winbugs\n\nsink(\"occ.txt\")\ncat(\"\n    model{\n    \n    #likelihood part\n    for (i in 1:n) #loop over each site\n  {\n    #loop over the number of visits per site \n    #make general later\n    #ie the number of surveys should be generalized\n    #beta vector and alpha vector should be generalized\n    \n    #state occupancy  \n    zb[i] ~ dbern(pz[i]) \n    #logit(pz[i]) <- beta0 + beta1*G[i] + beta2*AZ[i]\n    logit(pz[i]) <- beta0 + beta1*aet_div_pet[i] + beta2*Dry_Intensity_s[i]\n    \n    for (j in 1:site_i_len[i]) #loop over the number of visits per site #make general later\n    {       \n      #observation process\n      Y[i,j] ~ dbern(py[i,j])\n      py[i,j] <- zb[i]*pd[i,j]\n      #logit(pd[i,j])<- alpha0 + alpha1*intensive[i,j] + alpha2*log.total[i,j] + alpha3*day.Std[i,j] + alpha4*nspp[i,j]\n      logit(pd[i,j])<- alpha0 + alpha1*day.Std[i,j] + alpha2*nspp[i,j]\n    \n    }#end loop over surveys\n  }#end loop over sites\n    \n    alpha0 ~ dnorm(0, 0.0001)\n    alpha1 ~ dnorm(0, 0.0001)\n    alpha2 ~ dnorm(0, 0.0001)\n    #alpha3 ~ dnorm(0, 0.0001)\n    #alpha4 ~ dnorm(0, 0.0001)\n    \n    #beta0 ~ dnorm(0, 0.001)\n    #beta1 ~ dnorm(0, 0.001)\n    \n    #specify an informative prior\n    beta0 ~ dnorm(B_delta[1], C_delta)\n    beta1 ~ dnorm(B_delta[2], C_delta)\n    beta2 ~ dnorm(B_delta[3], C_delta)\n    \n    }##model\n    \",fill=TRUE)\nsink()\n\n#**************************\n# Input data for WinBUGS\n#**************************\n\n#parameters for the prior distribution of beta0 and beta1\n\nB_delta = c(0,0,0)\nC_delta = 0.0001\n\n\n#site specific occupancy covariates\n#G<-g[,1]\n#AZ<-sv[,1]\n\nocc.data <- list(Y=y, aet_div_pet=c(aet_div_pet[,1]), Dry_Intensity_s=c(dry[,1]),\n                   day.Std=day.Std, nspp=nspp,\n                 n=nrow(y), site_i_len=c(len.y), B_delta=B_delta, C_delta=C_delta)\n\n#*********************\n# Initial values\n#*********************\n\ninits <- function()\n{\n  list(\"zb\"=max.y,\"beta0\"=rnorm(1),\"beta1\"=rnorm(1), \"beta2\"=rnorm(1),\n       \"alpha0\"=rnorm(1),\"alpha1\"=rnorm(1), \"alpha2\"=rnorm(1) )\n}    \n\n#****************************\n# Paramaters to be monitored       \n#****************************\n\n#parameters <- c(\"beta0\", \"beta1\", \"beta2\", \"alpha0\", \"alpha1\", \"aplha2\", \"alpha3\", \"alpha4\", \"zb\")\nparameters <- c(\"beta0\", \"beta1\", \"beta2\",\"alpha0\", \"alpha1\", \"alpha2\")\n\n#**********************\n# MCMC settings\n#**********************\n\nniter <- 5000\nnburn <- 1000\nnthin <- 1\nnchains <- 1\n\nrequire(R2jags)\n\n#start <- Sys.time()\nt1<-Sys.time()\nocc.jags <- jags(occ.data, inits, parameters, \"occ.txt\",\n                 n.iter = niter, n.burnin = nburn, n.thin = nthin, n.chains = nchains,\n                 DIC = FALSE)\nt2<-Sys.time()\nt2-t1\n\nprint(occ.jags)\nplot(occ.jags)\nattach.jags(occ.jags)\n\ntraceplot(occ.jags)\n\npar(mfrow=c(3,2))\nplot(beta0)\nplot(beta1)\nplot(beta2)\n\nplot(alpha0)\nplot(alpha1)\nplot(alpha2)\n\npar(mfrow=c(3,2))\nhist(beta0)\nhist(beta1)\nhist(beta2)\n\nhist(alpha0)\nhist(alpha1)\nhist(alpha2)\n\npar(mfrow=c(3,2))\nqqPlot(beta0)\nqqPlot(beta1)\nqqPlot(beta2)\n\nqqPlot(alpha0)\nqqPlot(alpha1)\nqqPlot(alpha2)\n\nshapiro.test(beta0)\nshapiro.test(beta1)\nshapiro.test(beta2)\n\nshapiro.test(alpha0)\nshapiro.test(alpha1)\nshapiro.test(alpha2)\n",
    "created" : 1412226684077.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2068639832",
    "id" : "716F53C3",
    "lastKnownWriteTime" : 1412228071,
    "path" : "C:/Users/AllanClark/Dropbox/PhD/Year1/ISEC2014/OccupancyModel2/Application/Fairy_flycatcher_analysis.R",
    "project_path" : null,
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}