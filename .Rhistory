day.Std[j, 1:Len.y.i] <- out.day.std[[i]]
yearF[j, 1:Len.y.i] <- out.yearF[[i]]
yearF2[j, 1:Len.y.i] <- out.yearF2[[i]]
YearInd[j, 1:Len.y.i] <- out.YearInd[[i]]
nspp[j, 1:Len.y.i] <- out.nspp[[i]]
#huntley variables
gdd0[j, 1:Len.y.i] <- out.GDD0[[i]]
gdd5[j, 1:Len.y.i] <- out.GDD5[[i]]
mtco[j, 1:Len.y.i] <- out.MTCO[[i]]
mtwa[j, 1:Len.y.i] <- out.MTWA[[i]]
aet_div_pet[j, 1:Len.y.i] <- out.AET_div_PET[[i]]
wet[j, 1:Len.y.i] <- out.Wet_Intensity[[i]]
dry[j, 1:Len.y.i] <- out.Dry_Intensity[[i]]
#biomes
sv[j, 1:Len.y.i] <- out.SV[[i]]
g[j, 1:Len.y.i] <- out.G[[i]]
az[j, 1:Len.y.i] <- out.AZ[[i]]
nk[j, 1:Len.y.i] <- out.NK[[i]]
range.mean[j, 1:Len.y.i] <- out.Range[[i]]
j <- j + 1
}
}
#///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
# and now put the matrices into the correct format
# detection covariates
# year should be categorical!
obs.covs <- list(intensive=intensive[,],
year=year[,],
log.total=log.total[,],
day.Std=day.Std[,],
yearF=yearF[,],
yearF2=yearF2[,],
YearInd=YearInd[,],
nspp=nspp[,])
#///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
# Clean up  the site specific variables
#///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#first isolate the site covariates that will be considered.
names(alldat)
#occupancy covariates
#Biome covariates, The huntley variables standardized
site.dat <- alldat[ , c(2, 21:24,35:42)]  #change later
head(site.dat)
site.dat <- unique(site.dat)
head(site.dat)
dim(site.dat)
dim(y)
OMdat <- unmarkedFrameOccu(y=y[,], siteCovs = site.dat, obsCovs=obs.covs)
#///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Choose_sites<-function(y, siteCovs, obsCovs, choose_sites, SiteMax=25)
{
#the function allows the user to enter which sites should be selected
y<-y[choose_sites,1:SiteMax]
site.dat<-siteCovs[choose_sites,]
obs.covs<-lapply(1:length(obsCovs), function(x)obsCovs[[x]][choose_sites,1:SiteMax])
names(obs.covs)<-names(obsCovs)
OMdat <- unmarkedFrameOccu(y=y[,], siteCovs = site.dat, obsCovs=obs.covs)
list(OMdat=OMdat)
#list(y=y, siteCovs=site.dat, obsCovs=obs.covs)
}
require(unmarked)
require(AICcmodavg)
require(car)
require(xtable)
require(R2jags) #Jags 3.4.0 was used
#///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
## set working directory
#laptop
#setwd("C:/Users/AllanClark/Dropbox/PhD/Year1/ISEC2014/OccupancyModel2/Application")
#office
setwd("C:/Users/01369661/Dropbox/PhD/Year1/ISEC2014/OccupancyModel2/ISECflash/Results/Application")
#///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
# Convert the survey data to the correct format "by hand"
#///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
alldat <- read.csv("Fairy_flycatcher.csv", header=T)[, -1]
names(alldat)
alldat$yearF <- paste( strptime(as.character(alldat$Start_Date),format="%Y/%m/%d")$year - 100, "F", sep="")
head(alldat$yearF, 20)
alldat$yearF[which(alldat$yearF=="8F")]<-"00F"
#make some new variables
alldat[, 34]<- (alldat[,8]-mean(alldat[,8]))/sd(alldat[,8]) #standardized total number of species
colnames(alldat)[34]<-"nspp"
#the huntley variables standardized
alldat[, 35]<- (alldat[,14]-mean(alldat[,14]))/sd(alldat[,14]) #standardized GDD0
alldat[, 36]<- (alldat[,15]-mean(alldat[,15]))/sd(alldat[,15]) #standardized GDD5
alldat[, 37]<- (alldat[,16]-mean(alldat[,16]))/sd(alldat[,16]) #standardized MTCO
alldat[, 38]<- (alldat[,17]-mean(alldat[,17]))/sd(alldat[,17]) #standardized MTWA
alldat[, 39]<- (alldat[,18]-mean(alldat[,18]))/sd(alldat[,18]) #standardized AET_div_PET
alldat[, 40]<- (alldat[,19]-mean(alldat[,19]))/sd(alldat[,19]) #standardized Wet_Intensity
alldat[, 41]<- (alldat[,20]-mean(alldat[,20]))/sd(alldat[,20]) #standardized Dry_Intensity
alldat[,42]<-alldat[,17]-alldat[,16] #maximum mean temp - min mean temp
alldat[,42]<- (alldat[,42]-mean(alldat[,42]))/sd(alldat[,42]) #standardized mean range
alldat[,43]<-"00F"
alldat[,44]<-0
alldat[which(alldat$yearF=="10F"),43]<-"10F"
alldat[which(alldat$yearF=="10F"),44]<-1
colnames(alldat)[35:44]<-c("GDD0_s","GDD5_s","MTCO_s",  "MTWA_s",  "AET_div_PET_s",	"Wet_Intensity_s","Dry_Intensity_s","Range_mean","yearsF2","YearInd")
#///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
# Convert the *survey specific* covariates into long form
#///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
names(alldat)  #make sure columns number (below) match up with correct columns
# convert the long data frame into the wide format required by unmarked
#///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
out.y <- unstack(alldat[ , c(11, 2)]) #Spp_On_Card
#detection covariates
out.intensive <- unstack(alldat[ , c(28, 2)]) #log number of intensive hours birding
out.year <- unstack(alldat[ , c(30, 2)]) #year.F (baseline : 2008=0)
out.logtotal <- unstack(alldat[ , c(31, 2)] ) #log total number of hours birding
out.day.std <- unstack(alldat[ , c(32, 2)])
out.yearF <- unstack(alldat[ , c(33, 2)])
out.nspp <- unstack(alldat[ , c(34, 2)])
out.yearF2 <- unstack(alldat[ , c(43, 2)])
out.YearInd <- unstack(alldat[ , c(44, 2)])
#occupancy covariates
#The huntley variables standardized
out.GDD0<-unstack(alldat[ , c(35, 2)])
out.GDD5<-unstack(alldat[ , c(36, 2)])
out.MTCO<-unstack(alldat[ , c(37, 2)])
out.MTWA<-unstack(alldat[ , c(38, 2)])
out.AET_div_PET<-unstack(alldat[ , c(39, 2)])
out.Wet_Intensity<-unstack(alldat[ , c(40, 2)])
out.Dry_Intensity<-unstack(alldat[ , c(41, 2)])
out.Range<-unstack(alldat[ , c(42, 2)])
#Biome covariates
out.SV<-unstack(alldat[ , c(21, 2)])
out.G<-unstack(alldat[ , c(22, 2)])
out.AZ<-unstack(alldat[ , c(23, 2)])
out.NK<-unstack(alldat[ , c(24, 2)])
#No limit has been made of the number of surveys - this can be changed later!
len.y<-NULL
max.y<-NULL
for (i in 1:length(out.y))
{
len.y[i]<- length(out.y[[i]])
max.y[i]<- max(out.y[[i]])
}
maxSurveys<-max(len.y)
#now convert these lists into the ragged arrrays
#///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
DummyMatInit<-matrix(NA, nrow= length(unique(alldat$Pentad )), ncol = maxSurveys)
y <- DummyMatInit ## absence presence data
#detection covariates
intensive <- DummyMatInit
year <- DummyMatInit
log.total <- DummyMatInit
day.Std <- DummyMatInit
yearF <- DummyMatInit
nspp <- DummyMatInit
yearF2 <- DummyMatInit
YearInd<-DummyMatInit
#occupancy covariates
#The huntley variables standardized
gdd0 <- DummyMatInit
gdd5 <- DummyMatInit
mtco <- DummyMatInit
mtwa <- DummyMatInit
aet_div_pet <- DummyMatInit
wet <- DummyMatInit
dry <- DummyMatInit
range.mean<- DummyMatInit
#Biome covariates
sv<-DummyMatInit
g<-DummyMatInit
az<-DummyMatInit
nk<-DummyMatInit
j <- 1
for(i in 1:length(out.y) )
{
if( is.null( out.y[[i]] ) == FALSE)
{
Len.y.i<-length( out.y[[i]])
y[j, 1:Len.y.i] <- out.y[[i]]
intensive[j, 1:Len.y.i] <- out.intensive[[i]]
year[j, 1:Len.y.i] <- out.year[[i]]
log.total[j, 1:Len.y.i] <- out.logtotal[[i]]
day.Std[j, 1:Len.y.i] <- out.day.std[[i]]
yearF[j, 1:Len.y.i] <- out.yearF[[i]]
yearF2[j, 1:Len.y.i] <- out.yearF2[[i]]
YearInd[j, 1:Len.y.i] <- out.YearInd[[i]]
nspp[j, 1:Len.y.i] <- out.nspp[[i]]
#huntley variables
gdd0[j, 1:Len.y.i] <- out.GDD0[[i]]
gdd5[j, 1:Len.y.i] <- out.GDD5[[i]]
mtco[j, 1:Len.y.i] <- out.MTCO[[i]]
mtwa[j, 1:Len.y.i] <- out.MTWA[[i]]
aet_div_pet[j, 1:Len.y.i] <- out.AET_div_PET[[i]]
wet[j, 1:Len.y.i] <- out.Wet_Intensity[[i]]
dry[j, 1:Len.y.i] <- out.Dry_Intensity[[i]]
#biomes
sv[j, 1:Len.y.i] <- out.SV[[i]]
g[j, 1:Len.y.i] <- out.G[[i]]
az[j, 1:Len.y.i] <- out.AZ[[i]]
nk[j, 1:Len.y.i] <- out.NK[[i]]
range.mean[j, 1:Len.y.i] <- out.Range[[i]]
j <- j + 1
}
}
#///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
# and now put the matrices into the correct format
# detection covariates
# year should be categorical!
obs.covs <- list(intensive=intensive[,],
year=year[,],
log.total=log.total[,],
day.Std=day.Std[,],
yearF=yearF[,],
yearF2=yearF2[,],
YearInd=YearInd[,],
nspp=nspp[,])
#///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
# Clean up  the site specific variables
#///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#first isolate the site covariates that will be considered.
names(alldat)
#occupancy covariates
#Biome covariates, The huntley variables standardized
site.dat <- alldat[ , c(2, 21:24,35:42)]  #change later
head(site.dat)
site.dat <- unique(site.dat)
head(site.dat)
dim(site.dat)
dim(y)
OMdat <- unmarkedFrameOccu(y=y[,], siteCovs = site.dat, obsCovs=obs.covs)
#///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
# Investigate some models over the years 2008-2013
# Not included in the paper
#///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Nvisits<-apply(y,1,function(x){length(na.omit(x))})
par(mfrow=c(1,1))
plot(Nvisits)
median(Nvisits)
onevisits<-which(Nvisits==1)
morevisits<-which(Nvisits!=1)
median(Nvisits[morevisits])
length(morevisits)
#notice that many of the sites are only visited once
table(Nvisits)
100*(1-cumsum(table(Nvisits))/length(out.y))
#identify how many sites are visited in each year
table(yearF[,1])
sites08<-which(yearF[,1]=="00F") #2008
sites09<-which(yearF[,1]=="9F")
sites10<-which(yearF[,1]=="10F")
sites11<-which(yearF[,1]=="11F")
sites12<-which(yearF[,1]=="12F")
sites13<-which(yearF[,1]=="13F")
table(Nvisits[sites08])
#///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#MLE ESTIMATION USING unmarked
#Use all of the data points
#ie all of the years are used
#A simple occupancy model is fitted
#///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
pairs(site.dat[,6:13])
#GDD0_s+GDD5_s are collinear
pairs(site.dat[,8:13])
#MTCO_s+MTWA_s highly correlated
pairs(site.dat[,10:13])
t1=Sys.time()
f7<- occu( ~intensive + YearInd ~AET_div_PET_s , data=OMdat,engine="C")
t2=Sys.time()
t2-t1 #18secs
f7
getwd()
library(vboccupancy)
setwd("C:/Users/01369661/Dropbox/PhD/Year1/ISEC2014/OccupancyModel2/ISECflash/Results/Application")
require(unmarked)
require(vboccupancy)
alldat <- read.csv("Fairy_flycatcher.csv", header=T)[, -1]
names(alldat)
alldat$yearF <- paste( strptime(as.character(alldat$Start_Date),format="%Y/%m/%d")$year - 100, "F", sep="")
head(alldat$yearF, 20)
alldat$yearF[which(alldat$yearF=="8F")]<-"00F"
#make some new variables
alldat[, 34]<- (alldat[,8]-mean(alldat[,8]))/sd(alldat[,8]) #standardized total number of species
colnames(alldat)[34]<-"nspp"
#the huntley variables standardized
alldat[, 35]<- (alldat[,14]-mean(alldat[,14]))/sd(alldat[,14]) #standardized GDD0
alldat[, 36]<- (alldat[,15]-mean(alldat[,15]))/sd(alldat[,15]) #standardized GDD5
alldat[, 37]<- (alldat[,16]-mean(alldat[,16]))/sd(alldat[,16]) #standardized MTCO
alldat[, 38]<- (alldat[,17]-mean(alldat[,17]))/sd(alldat[,17]) #standardized MTWA
alldat[, 39]<- (alldat[,18]-mean(alldat[,18]))/sd(alldat[,18]) #standardized AET_div_PET
alldat[, 40]<- (alldat[,19]-mean(alldat[,19]))/sd(alldat[,19]) #standardized Wet_Intensity
alldat[, 41]<- (alldat[,20]-mean(alldat[,20]))/sd(alldat[,20]) #standardized Dry_Intensity
alldat[,42]<-alldat[,17]-alldat[,16] #maximum mean temp - min mean temp
alldat[,42]<- (alldat[,42]-mean(alldat[,42]))/sd(alldat[,42]) #standardized mean range
alldat[,43]<-"00F"
alldat[,44]<-0
alldat[which(alldat$yearF=="10F"),43]<-"10F"
alldat[which(alldat$yearF=="10F"),44]<-1
colnames(alldat)[35:44]<-c("GDD0_s","GDD5_s","MTCO_s",  "MTWA_s",  "AET_div_PET_s",  "Wet_Intensity_s","Dry_Intensity_s","Range_mean","yearsF2","YearInd")
#///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
# Convert the *survey specific* covariates into long form
#///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
names(alldat)  #make sure columns number (below) match up with correct columns
# convert the long data frame into the wide format required by unmarked
#///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
out.y <- unstack(alldat[ , c(11, 2)]) #Spp_On_Card
#detection covariates
out.intensive <- unstack(alldat[ , c(28, 2)]) #log number of intensive hours birding
out.year <- unstack(alldat[ , c(30, 2)]) #year.F (baseline : 2008=0)
out.logtotal <- unstack(alldat[ , c(31, 2)] ) #log total number of hours birding
out.day.std <- unstack(alldat[ , c(32, 2)])
out.yearF <- unstack(alldat[ , c(33, 2)])
out.nspp <- unstack(alldat[ , c(34, 2)])
out.yearF2 <- unstack(alldat[ , c(43, 2)])
out.YearInd <- unstack(alldat[ , c(44, 2)])
#occupancy covariates
#The huntley variables standardized
out.GDD0<-unstack(alldat[ , c(35, 2)])
out.GDD5<-unstack(alldat[ , c(36, 2)])
out.MTCO<-unstack(alldat[ , c(37, 2)])
out.MTWA<-unstack(alldat[ , c(38, 2)])
out.AET_div_PET<-unstack(alldat[ , c(39, 2)])
out.Wet_Intensity<-unstack(alldat[ , c(40, 2)])
out.Dry_Intensity<-unstack(alldat[ , c(41, 2)])
out.Range<-unstack(alldat[ , c(42, 2)])
#Biome covariates
out.SV<-unstack(alldat[ , c(21, 2)])
out.G<-unstack(alldat[ , c(22, 2)])
out.AZ<-unstack(alldat[ , c(23, 2)])
out.NK<-unstack(alldat[ , c(24, 2)])
#No limit has been made of the number of surveys - this can be changed later!
len.y<-NULL
max.y<-NULL
for (i in 1:length(out.y))
{
len.y[i]<- length(out.y[[i]])
max.y[i]<- max(out.y[[i]])
}
maxSurveys<-max(len.y)
#now convert these lists into the ragged arrrays
#///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
DummyMatInit<-matrix(NA, nrow= length(unique(alldat$Pentad )), ncol = maxSurveys)
y <- DummyMatInit ## absence presence data
#detection covariates
intensive <- DummyMatInit
year <- DummyMatInit
log.total <- DummyMatInit
day.Std <- DummyMatInit
yearF <- DummyMatInit
nspp <- DummyMatInit
yearF2 <- DummyMatInit
YearInd<-DummyMatInit
#occupancy covariates
#The huntley variables standardized
gdd0 <- DummyMatInit
gdd5 <- DummyMatInit
mtco <- DummyMatInit
mtwa <- DummyMatInit
aet_div_pet <- DummyMatInit
wet <- DummyMatInit
dry <- DummyMatInit
range.mean<- DummyMatInit
#Biome covariates
sv<-DummyMatInit
g<-DummyMatInit
az<-DummyMatInit
nk<-DummyMatInit
j <- 1
for(i in 1:length(out.y) )
{
if( is.null( out.y[[i]] ) == FALSE)
{
Len.y.i<-length( out.y[[i]])
y[j, 1:Len.y.i] <- out.y[[i]]
intensive[j, 1:Len.y.i] <- out.intensive[[i]]
year[j, 1:Len.y.i] <- out.year[[i]]
log.total[j, 1:Len.y.i] <- out.logtotal[[i]]
day.Std[j, 1:Len.y.i] <- out.day.std[[i]]
yearF[j, 1:Len.y.i] <- out.yearF[[i]]
yearF2[j, 1:Len.y.i] <- out.yearF2[[i]]
YearInd[j, 1:Len.y.i] <- out.YearInd[[i]]
nspp[j, 1:Len.y.i] <- out.nspp[[i]]
#huntley variables
gdd0[j, 1:Len.y.i] <- out.GDD0[[i]]
gdd5[j, 1:Len.y.i] <- out.GDD5[[i]]
mtco[j, 1:Len.y.i] <- out.MTCO[[i]]
mtwa[j, 1:Len.y.i] <- out.MTWA[[i]]
aet_div_pet[j, 1:Len.y.i] <- out.AET_div_PET[[i]]
wet[j, 1:Len.y.i] <- out.Wet_Intensity[[i]]
dry[j, 1:Len.y.i] <- out.Dry_Intensity[[i]]
#biomes
sv[j, 1:Len.y.i] <- out.SV[[i]]
g[j, 1:Len.y.i] <- out.G[[i]]
az[j, 1:Len.y.i] <- out.AZ[[i]]
nk[j, 1:Len.y.i] <- out.NK[[i]]
range.mean[j, 1:Len.y.i] <- out.Range[[i]]
j <- j + 1
}
}
#///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
# and now put the matrices into the correct format
# detection covariates
# year should be categorical!
obs.covs <- list(intensive=intensive[,],
year=year[,],
log.total=log.total[,],
day.Std=day.Std[,],
yearF=yearF[,],
yearF2=yearF2[,],
YearInd=YearInd[,],
nspp=nspp[,])
#///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
# Clean up  the site specific variables
#///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#first isolate the site covariates that will be considered.
names(alldat)
#occupancy covariates
#Biome covariates, The huntley variables standardized
site.dat <- alldat[ , c(2, 21:24,35:42)]  #change later
head(site.dat)
site.dat <- unique(site.dat)
head(site.dat)
dim(site.dat)
dim(y)
OMdat <- unmarkedFrameOccu(y=y[,], siteCovs = site.dat, obsCovs=obs.covs)
#///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#MLE ESTIMATION USING unmarked
#Use all of the data points
#ie all of the years are used
#A simple occupancy model is fitted
#///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
t1=Sys.time()
f7<- occu( ~intensive + YearInd ~AET_div_PET_s , data=OMdat,engine="C")
t2=Sys.time()
t2-t1 #18secs
f7
#
# Call:
#   occu(formula = ~intensive + YearInd ~ AET_div_PET_s, data = OMdat,
#        engine = "C")
#
# Occupancy:
#   Estimate    SE    z  P(>|z|)
# (Intercept)      1.123 0.179 6.28 3.46e-10
# AET_div_PET_s    0.321 0.132 2.44 1.48e-02
#
# Detection:
#   Estimate     SE      z  P(>|z|)
# (Intercept)   -1.557 0.1106 -14.08 5.23e-45
#intensive      0.218 0.0876   2.48 1.30e-02
#YearInd        0.569 0.0848   6.71 1.92e-11
#AIC: 4960.224
names(f7)
coef(f7, type='state') #occupancy coefficients
coef(f7, type='det') #detection coefficients
# se
(diag(vcov(f7, type='state')))
sqrt(diag(vcov(f7, type='det')))
# FITTING the VB model
#///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ymat<-y
Xmat<-unique(alldat[ , c(2, 21:24,35:42)])  #change later (include all of the X's Pentad is not a regressor!)
names(Xmat)
#If we set a limit on the number of visits use this
#SiteMax<- ??? #'enter a value
# Wmat <- list(intensive=intensive[,1:SiteMax],
#                  log.total=log.total[,1:SiteMax],
#                  day.Std=day.Std[,1:SiteMax],
#                  nspp=nspp[,1:SiteMax],
#                  YearInd=YearInd[,1:SiteMax])
Wmat <- list(intensive=intensive[,],
log.total=log.total[,],
day.Std=day.Std[,],
nspp=nspp[,],
YearInd=YearInd[,])
design_mats<-vb_Designs(W=Wmat, X=Xmat, y=ymat)
names(design_mats)
#Some checks
dim(design_mats$Y)
dim(design_mats$X)
dim(design_mats$W)
names(design_mats$W)
design_mats$Names
design_mats$nvisits
length(design_mats$nvisits)
length(design_mats$pres_abs)
#///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#Set the prior distributions used
alpha_0 <- matrix(0, ncol=1, nrow=3)
beta_0 <- matrix(0, ncol=1, nrow=2)
Sigma_beta_0 <- diag(2)*1000
Sigma_alpha_0 <- diag(3)*1000
#set the formula used
form1<- ymat~ AET_div_PET_s  ~ intensive + YearInd
#Set LargeSample=FALSE
#t1=Sys.time()
#  vb_a1<-vb_model2_la(formula=form1, design_mats=design_mats, alpha_0=alpha_0, beta_0=beta_0, Sigma_alpha_0=Sigma_alpha_0, Sigma_beta_0=Sigma_beta_0,LargeSample=FALSE, epsilon=1e-6, F)
#t2=Sys.time()
#t2-t1 #53secs
#Set LargeSample=TRUE
t1=Sys.time()
vb_a1<-vb_model2_la(formula=form1, design_mats=design_mats, alpha_0=alpha_0, beta_0=beta_0, Sigma_alpha_0=Sigma_alpha_0, Sigma_beta_0=Sigma_beta_0,LargeSample=TRUE, epsilon=1e-6, F)
t2=Sys.time()
t2-t1 #14secs
names(design_mats)
design_mats$Names
names(OMdat)
attributes(OMdat)
names(OMdat$siteCovs)
names(site.dat)
names(obs.covs)
design_mats$Names
names(Xmat)
names(Wmat)
S = matrix(c(1,0.5,0,0.5,1,0,0,0,4), nrow=3,ncol=3, byrow=TRUE)
S
S[1:2,1:2]
solve(S[1:2,1:2])
